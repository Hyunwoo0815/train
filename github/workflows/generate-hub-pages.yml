# .github/workflows/generate-hub-pages.yml
name: 🚄 허브 페이지 생성 및 배포

on:
  # 푸시할 때마다 실행 (main 브랜치)
  push:
    branches: [ main ]
    paths:
      - 'cache/**'
      - 'hub.py'
      - '.github/workflows/**'
  
  # 수동 실행 가능
  workflow_dispatch:
    inputs:
      target_station:
        description: '특정 역만 처리 (선택사항)'
        required: false
        default: ''
      use_html_extension:
        description: 'HTML 확장자 사용'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  generate-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: 🐍 Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 의존성 설치
      run: |
        pip install --upgrade pip
        # 필요한 패키지가 있다면 여기에 추가
        # pip install requests beautifulsoup4
    
    - name: 📊 입력 데이터 확인
      run: |
        echo "🔍 cache 폴더 내용 확인:"
        if [ -d "cache" ]; then
          echo "📂 cache 폴더 존재함"
          echo "📄 JSON 파일 개수: $(ls cache/*.json 2>/dev/null | wc -l)"
          echo "📋 파일 목록 (처음 10개):"
          ls cache/*.json 2>/dev/null | head -10 || echo "JSON 파일이 없습니다"
        else
          echo "❌ cache 폴더가 존재하지 않습니다"
          exit 1
        fi
    
    - name: 🗑️ 기존 HTML 파일들 정리 (강제 덮어쓰기)
      run: |
        echo "🧹 기존 HTML 파일들 정리 중..."
        
        # 기존 HTML 파일 현황 확인
        html_count=$(find . -maxdepth 1 -name "*.html" -o -name "*열차시간표" | wc -l)
        if [ $html_count -gt 0 ]; then
          echo "📊 기존 HTML 파일: ${html_count}개"
          echo "📋 파일 목록:"
          find . -maxdepth 1 -name "*.html" -o -name "*열차시간표" | head -5
        fi
        
        # meta.json 백업 (발행일 유지를 위해)
        if [ -f "meta.json" ]; then
          echo "💾 meta.json 백업 중..."
          cp meta.json meta.json.backup
        fi
        
        # 기존 HTML 파일들 삭제 (루트 폴더의 HTML만)
        echo "🗑️ 기존 HTML 파일들 삭제..."
        find . -maxdepth 1 -name "*.html" -delete 2>/dev/null || true
        find . -maxdepth 1 -name "*열차시간표" -delete 2>/dev/null || true
        rm -f meta.json
        
        # meta.json 복원 (발행일 유지)
        if [ -f "meta.json.backup" ]; then
          echo "📋 meta.json 복원..."
          mv meta.json.backup meta.json
        fi
        
        echo "✅ HTML 파일 정리 완료"
    
    - name: 🚄 허브 페이지 생성
      env:
        INPUT_FOLDER: cache
        OUTPUT_FOLDER: .
        SITE_BASE_URL: ${{ github.event.repository.name != github.repository_owner.login && format('https://{0}.github.io/{1}', github.repository_owner, github.event.repository.name) || format('https://{0}.github.io', github.repository_owner) }}
        USE_HTML_EXTENSION: ${{ github.event.inputs.use_html_extension || 'false' }}
        TARGET_STATION: ${{ github.event.inputs.target_station }}
      run: |
        echo "🚀 허브 페이지 생성 시작"
        echo "📂 입력 폴더: $INPUT_FOLDER"
        echo "📁 출력 폴더: $OUTPUT_FOLDER (루트 폴더)"
        echo "🌐 사이트 URL: $SITE_BASE_URL"
        echo "🔧 HTML 확장자: $USE_HTML_EXTENSION"
        echo "🎯 대상 역: ${TARGET_STATION:-'전체'}"
        echo ""
        
        python hub.py
    
    - name: 📋 생성 결과 확인
      run: |
        echo "🔍 생성된 파일 확인:"
        echo "📊 생성된 HTML 파일 개수: $(find . -maxdepth 1 -name "*.html" -o -name "*열차시간표" | wc -l)"
        echo ""
        echo "📋 생성된 파일 목록 (처음 10개):"
        find . -maxdepth 1 -name "*.html" -o -name "*열차시간표" | head -10
        echo ""
        echo "📄 메타데이터 파일:"
        ls -la meta.json 2>/dev/null || echo "meta.json 없음"
        echo ""
        echo "📂 루트 폴더 전체 크기:"
        du -sh . 2>/dev/null || echo "크기 측정 실패"
    
    - name: 🎨 기본 index.html 생성 (덮어쓰기 모드)
      run: |
        echo "📄 index.html 생성 (기존 파일 덮어쓰기)"
        cat > index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="ko">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>레일가이드 - 전국 열차 시간표</title>
          <meta name="description" content="전국 모든 역의 KTX, SRT, ITX, 무궁화호 열차 시간표를 실시간으로 확인하세요.">
          <style>
            body { font-family: 'Noto Sans KR', sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            h1 { color: #2c3e50; text-align: center; }
            .station-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 15px; margin-top: 30px; }
            .station-card { background: white; border: 1px solid #ddd; border-radius: 8px; padding: 15px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .station-card a { text-decoration: none; color: #2c3e50; font-weight: 500; }
            .station-card:hover { transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.15); }
          </style>
        </head>
        <body>
          <h1>🚄 레일가이드 열차 시간표</h1>
          <p style="text-align: center; color: #666;">전국 모든 역의 열차 시간표를 확인하세요</p>
          <div class="station-grid" id="stationList">
            <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #666;">
              📊 역 목록을 로딩 중입니다...
            </div>
          </div>
          <script>
            // 생성된 HTML 파일들을 동적으로 로드해서 역 목록 생성
            fetch('./meta.json')
              .then(response => response.json())
              .then(data => {
                const stationList = document.getElementById('stationList');
                stationList.innerHTML = '';
                
                Object.entries(data).forEach(([key, info]) => {
                  const stationCard = document.createElement('div');
                  stationCard.className = 'station-card';
                  stationCard.innerHTML = `
                    <a href="${key}">
                      <div>🚉 ${info.route.split(' → ')[0]}</div>
                      <small>${info.total_destinations}개 노선</small>
                    </a>
                  `;
                  stationList.appendChild(stationCard);
                });
              })
              .catch(() => {
                document.getElementById('stationList').innerHTML = 
                  '<div style="grid-column: 1 / -1; text-align: center; color: #666;">역 목록을 불러올 수 없습니다.</div>';
              });
          </script>
        </body>
        </html>
        EOF
        echo "✅ index.html 생성 완료"
    
    - name: 🚀 GitHub Pages 배포 (루트 폴더)
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        publish_branch: gh-pages
        force_orphan: true
        enable_jekyll: false
        allow_empty_commit: false
        commit_message: '🚄 열차 시간표 업데이트: ${{ github.sha }}'
        exclude_assets: '.github,cache,hub.py,README.md,*.json,*.py'
    
    - name: 📱 배포 완료 알림
      if: success()
      run: |
        REPO_NAME="${{ github.event.repository.name }}"
        OWNER="${{ github.repository_owner }}"
        
        if [ "$REPO_NAME" != "$OWNER" ]; then
          SITE_URL="https://${OWNER}.github.io/${REPO_NAME}"
        else
          SITE_URL="https://${OWNER}.github.io"
        fi
        
        echo "🎉 배포 완료!"
        echo "🌐 사이트 URL: $SITE_URL"
        echo "📊 생성된 페이지 수: $(find docs -name "*.html" -o -name "*열차시간표" | wc -l)"
        echo ""
        echo "⏰ 몇 분 후에 사이트에 접속해보세요!"
    
    - name: ❌ 실패 시 디버그 정보
      if: failure()
      run: |
        echo "🔍 디버그 정보:"
        echo "📂 현재 디렉토리 구조:"
        find . -type f -name "*.py" -o -name "*.json" -o -name "*.html" | head -20
        echo ""
        echo "📄 hub.py 존재 여부:"
        ls -la hub.py 2>/dev/null || echo "hub.py 없음"
        echo ""
        echo "📂 cache 폴더 상태:"
        ls -la cache/ 2>/dev/null || echo "cache 폴더 없음"